<?php
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/*function csis_helpers_preprocess_group(&$build){
  $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($build['group']);
  $vars['content']['#attached']['library'][] = 'csis_helpers/entity_info_helpers';
}

function csis_helpers_preprocess_node(&$build){
  $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_node_entity_info($build['node']);
    $vars['content']['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
}*/

function csis_helpers_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){
  if(in_array($view_mode,array('introduction','data','table','maps','twins','summary','sce'))){
    $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_node_entity_info($entity);
    $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
    $build['#attached']['library'][] = 'csis_helpers/include_in_report';
    $build['#attached']['library'][] = 'csis_helpers/html2canvas';
    $build['#attached']['library'][] = 'csis_helpers/update_step_relations';
  }
}

function csis_helpers_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode){
  $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
  $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
}

function csis_helpers_form_node_form_alter (&$form, $form_state, $form_id){
  //attach node-id and if group node group-id to drupalSettings

  $entity = $form_state->GetFormObject()->getEntity();
  if($entity->id()){
    $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_node_entity_info($entity);
  }
}

function csis_helpers_form_group_form_alter (&$form, $form_state, $form_id){
  //attach group node grout-id to drupalSettings
  $entity = $form_state->GetFormObject()->getEntity();
  if($entity->id()){
   $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
   $form['#attached']['library'][] = 'csis_helpers/entity_info_helpers';

  }
}

function csis_helpers_preprocess_views_view(&$variables) {

  $view = $variables['view'];
\Drupal::logger('csis helpers')->notice($view->id());
  if ($view->id() == 'data_packages' && $view->current_display == 'browser'){
     $variables['#attached']['library'][] = 'csis_helpers/entitybrowser_helpers';
  }

  $variables['#attached']['library'][] = 'csis_helpers/stepdata_helpers';
  $variables['#attached']['library'][] = 'bootstrap/drupal.vertical-tabs';

  $variables['#attached']['library'][] = 'csis_helpers/progress_indicator';
}

function csis_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets){
 // kint($javascript);
}



function csis_helpers_node_entity_info(\Drupal\Core\Entity\EntityInterface $entity){
  $groupid = array();
  $groupuuid = array();
  $relations = GroupContent::loadByEntity($entity);
  foreach ( $relations as $relation) {
    $groupid[] = $relation->getGroup()->id();
    $groupuuid[] = $relation->getGroup()->uuid();
  }

  // check if current user has assigned other role than "authenticated", if not -> no write/edit rights
  $user = \Drupal::currentUser();
  // getRoles(TRUE) only returns roles other than "anonymous" and "authenticated"
  $has_user_special_roles = empty($user->getRoles(TRUE));

  $entityinfo = array(
    'step'=> $entity->id(),
    'step_uuid' => $entity->uuid(),
    'study'=> (empty($groupid)? 0 : $groupid[0]),
    'study_uuid' => (empty($groupuuid)? 0 : $groupuuid[0]),
    'write_permissions' => ($has_user_special_roles ? 0 : 1)
  );
  return $entityinfo;
}

function csis_helpers_group_entity_info(\Drupal\Core\Entity\EntityInterface $entity){
  // check if current user has assigned other role than "authenticated", if not -> no write/edit rights
  $user = \Drupal::currentUser();
  // getRoles(TRUE) only returns roles other than "anonymous" and "authenticated"
  $has_user_special_roles = empty($user->getRoles(TRUE));

  $entityinfo = array(
    'step'=> null,
    'study'=> $entity->id(),
    'study_uuid'=> $entity->uuid(),
    'write_permissions' => ($has_user_special_roles ? 0 : 1)
  );
  return $entityinfo;
}

function csis_helpers_node_insert (\Drupal\node\Entity\Node $node) {
  // if a Report image is created -> add it as a group content depending on the referenced GL-step
  if ($node->bundle() == 'report_image' && !$node->get('field_source_step')->isEmpty()) {
    // get GL-step (which is already part of the Group)
    $source_step_id = $node->get("field_source_step")->first()->getValue()['target_id'];
    $gl_node = Node::load($source_step_id);

    $plugin_id = 'group_node:' . $node->bundle();

    // if GL-step exists -> load the corresponding group content and retrieve the group id
    if ($gl_node) {
      $group_id = -1;

      $group_contents = GroupContent::loadByEntity($gl_node);
      foreach ($group_contents as $group_content) {
        $group_id = $group_content->getGroup()->id();
      }

      $group = Group::load($group_id);

      // if group exists -> add report image as group content to that group
      if($group) {
        $group->addContent($node,$plugin_id);
      }
    }
  }
}


