<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Disable in production!
 */
$DEBUG = true;

/**
 * Poor man's debugger
 * See https://stackify.com/how-to-log-to-console-in-php/
 */
function console_log($output, $with_script_tags = true)
{
  $js_code = "console.debug(" . json_encode($output, JSON_HEX_TAG) . ");";
  if ($with_script_tags) {
    $js_code = '<script>' . $js_code . '</script>';
  }
  echo $js_code;
}

/**
 * FIXME: This method is invoked for each entity on the page and thus overwrites all other entity Infos
 */
function csis_helpers_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
  $type = $entity->bundle();
  if ($type == ("gl_step" || "data_package" || "data_package_metadata") && $view_mode != "compact") {
    $entityInfo = csis_helpers_node_entity_info($entity);

    $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
    $build['#attached']['library'][] = 'csis_helpers/include_in_report';
    $build['#attached']['library'][] = 'csis_helpers/html2canvas';
    $build['#attached']['library'][] = 'csis_helpers/seamless';
    $build['#attached']['library'][] = 'csis_helpers/update_step_relations';
    $build['#attached']['library'][] = 'csis_helpers/iframe_connector';

    switch ($type) {
      case 'gl_step':
        $build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = $entityInfo;
        // DEPRECATED: use studyInfo/datapackageInfo/resourceInfo instead!
        $entityInfo['Warning'] = 'DEPRECATED! Use studyInfo instead';
        $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = $entityInfo;
        $build['#attached']['library'][] = 'csis_helpers/permission_control';
        //$build['#attached']['library'][] = 'csis_helpers/pull_emikat_status'; // is it needed in the GL-steps as well or just in the Study group?
        break;
      case 'data_package':
        $build['#attached']['drupalSettings']['csisHelpers']['datapackageInfo'] = $entityInfo;
        break;
      case 'data_package_metadata':
        $build['#attached']['drupalSettings']['csisHelpers']['resourceInfo'] = $entityInfo;
        break;
        //default:$build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = $entityInfo;
    }
  } else {
    //console_log('entity type ' . $type . ' not supported');
  }
}

function csis_helpers_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
  // DEPRECATED: use studyInfo/datapackageInfo/resourceInfo instead!
  $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
  $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
  $build['#attached']['library'][] = 'csis_helpers/permission_control';
  $build['#attached']['library'][] = 'csis_helpers/pull_emikat_status';

  $build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = csis_helpers_group_entity_info($entity);
}

function csis_helpers_form_node_form_alter(&$form, $form_state, $form_id)
{
  //attach node-id and if group node group-id to drupalSettings

  $entity = $form_state->GetFormObject()->getEntity();
  if ($entity->id()) {
    $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_node_entity_info($entity);
  }

  // prevent page-reload /redirect for the edit-form of Report images (unless user is on the summary page)
  if ($form_id == "node_report_image_edit_form" && \Drupal::request()->query->has('destination')) {
    $pathComponents = explode("/", \Drupal::request()->query->get('destination'));
    $lastPathComponent = end($pathComponents);
    if ($lastPathComponent != "summary") {
      $form['actions']['submit']['#submit'][] = '_csis_helpers_ajax_submit';
      $form['actions']['submit']['#attributes']['class'][] = 'use-ajax-submit';
    }
  }
}

function csis_helpers_form_group_form_alter(&$form, $form_state, $form_id)
{
  //attach group node grout-id to drupalSettings
  $entity = $form_state->GetFormObject()->getEntity();
  if ($entity->id()) {
    $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
    $form['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
  }

  // hide Delete-button for Studies everywhere except for the default Edit-form
  if ($entity->bundle() == "study" && $form['form_id']['#value'] != "group_study_edit_form") {
    $form['actions']['delete']['#access'] = false;
  }
}

function csis_helpers_preprocess_views_view(&$variables)
{
  $view = $variables['view'];
  //\Drupal::logger('csis helpers')->notice($view->id());
  if ($view->id() == 'data_packages' && $view->current_display == 'browser') {
    $variables['#attached']['library'][] = 'csis_helpers/entitybrowser_helpers';
    $variables['#attached']['library'][] = 'csis_helpers/entitybrowser_reorder';
  }

  $variables['#attached']['library'][] = 'csis_helpers/stepdata_helpers';
  $variables['#attached']['library'][] = 'bootstrap/drupal.vertical-tabs';

  $variables['#attached']['library'][] = 'csis_helpers/progress_indicator';
}

function csis_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets)
{
  // kint($javascript);
}

/**
 * Extract information from **node** entity.
 *
 * Attention: data_package_metadata is the machine name of Data Package **Resource**!
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info(\Drupal\Core\Entity\EntityInterface $entity)
{
  // check if current user has assigned other role than "authenticated", if not -> no write/edit rights
  $userAccount = \Drupal::currentUser();
  // getRoles(TRUE) only returns roles other than "anonymous" and "authenticated"
  $has_user_special_roles = !empty($userAccount->getRoles(true));

  $nodeEntityInfo = array(
    'id' => $entity->id(),
    'uuid' => $entity->uuid(),
    //'title' => $entity->get('title')->value, // inconsistency: no title field ins study group! title? label? name?
    //'name' => $entity->get('field_name')->value, // inconsistency: no name field in resource, name field in data package used for 'ckan_id'
    'write_permissions' => ($has_user_special_roles ? 1 : 0),
  );

  $type = $entity->bundle();

  switch ($type) {
    case 'gl_step':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_study($entity));
      break;
    case 'data_package':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_datapackage($entity));
      break;
    case 'data_package_metadata':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_resource($entity));
      break;
      //default:return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_study($entity));
  }

  return $nodeEntityInfo;
}

/**
 * Extract information from **Data Package** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_datapackage(\Drupal\Core\Entity\EntityInterface $entity)
{
  //console_log('creating entity info for data package ' . $entity->get('title')->value);
  $datapackageEntityInfo = array(
    'name' => $entity->get('title')->value
  );

  $spatialExtent = extractSpatialExtent($entity);
  if ($spatialExtent != null) {
    return array_merge($datapackageEntityInfo, $spatialExtent);
  }

  return $datapackageEntityInfo;
}

/**
 * Extract information from DATA PACKAGES' RESOURCE entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_resource(\Drupal\Core\Entity\EntityInterface $entity)
{
  //console_log('creating entity info for resource ' . $entity->get('title')->value);
  $resourcEntityInfo = array(
    'name' => $entity->get('title')->value
  );

  $spatialExtent = extractSpatialExtent($entity);
  if ($spatialExtent != null) {
    return array_merge($resourcEntityInfo, $spatialExtent);
  }

  return $resourcEntityInfo;
}

/**
 * Extract information from STUDY's GL_STEP **node** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_study(\Drupal\Core\Entity\EntityInterface $entity)
{
  return \Drupal::service('csis_helpers.study_info_generator')->generateStudyInfoNode($entity);
}

/**
 * sets for each Study group the $entityInfo variable
 * Extract information from STUDY **GROUP** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_group_entity_info(\Drupal\Core\Entity\EntityInterface $entity)
{
  // specify GroupType explicitly, since some fields might be unique to certain GroupTypes only
  if ($entity->getGroupType()->id() == "study") {
    return \Drupal::service('csis_helpers.study_info_generator')->generateStudyInfoGroup($entity);
  }
}

/**
 * Implements hook_entity_presave().
 * Needed currently for triggering Emikat once a Study is advanced enough or relevant information has changed
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_entity_presave(\Drupal\Core\Entity\EntityInterface $entity)
{
  // triggering Emikat only needed for Studies on live website
  if ($entity->bundle() == "study" && \Drupal::request()->getSchemeAndHttpHost() == "https://csis.myclimateservice.eu") {
    /** @var \Drupal\csis_helpers\Utils\EmikatHelperFunctions $emikatService */
    $emikatService = \Drupal::service('csis_helpers.emikat_helper_functions');
    $result = $emikatService->triggerEmikat($entity);

    //print result message to admins and developers directly to FE
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    if ($user->hasRole('administrator') || $user->hasRole('developer')) {
      \Drupal::messenger()->addMessage($result['message'], $result['type']);
    }
  }
}

/**
 * @param $node \Drupal\node\Entity\Node
 */
function csis_helpers_node_insert(\Drupal\node\Entity\Node $node)
{
  // if a Report image is created -> add it as a group content depending on the referenced GL-step
  if ($node->bundle() == 'report_image' && !$node->get('field_source_step')->isEmpty()) {
    // get GL-step (which is already part of the Group)
    $source_step_id = $node->get("field_source_step")->first()->getValue()['target_id'];
    $gl_node = Node::load($source_step_id);

    $plugin_id = 'group_node:' . $node->bundle();

    // if GL-step exists -> load the corresponding group content and retrieve the group id
    if ($gl_node) {
      $group_id = -1;

      $group_contents = GroupContent::loadByEntity($gl_node);
      foreach ($group_contents as $group_content) {
        $group_id = $group_content->getGroup()->id();
      }

      $group = Group::load($group_id);

      // if group exists -> add report image as group content to that group
      if ($group) {
        $group->addContent($node, $plugin_id);
      }
    }
  }
}

/**
 * Implements hook_jsonapi_entity_filter_access() for 'study' group.
 * This is necessary to fix this issue: https://www.drupal.org/project/jsonapi/issues/3037519
 */
function csis_helpers_jsonapi_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account)
{
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
  ]);
}

/**
 * Close the Modal and prevent redirect or page reload.
 *
 * @param array $form
 *   The form that will be altered.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState Object.
 */
function _csis_helpers_ajax_submit(array $form, FormStateInterface &$form_state)
{
  $response = new AjaxResponse();
  $response->addCommand(new CloseModalDialogCommand());
  $form_state->setResponse($response);
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Array
 */
function extractSpatialExtent($entity)
{
  $spatial_extents = $entity->get('field_spatial_extent')->referencedEntities(); // referencedEntities() returns an array of entities
  if (
    !empty($spatial_extents) && is_array($spatial_extents) && sizeof($spatial_extents) > 0
    && $spatial_extents[0] != null && $spatial_extents[0]->get('field_bounding_box') != null
  ) {
    //console_log($spatial_extents[0]->get('field_bounding_box')->value);
    $spatialExtent = array('spatial_extent' => $spatial_extents[0]->get('field_bounding_box')->value);

    // @deprecated See https://github.com/clarity-h2020/map-component/issues/53
    /*$spatialExtent = array(
            'minx' => $spatial_extents[0]->get('field_xmin')->value,
            'miny' => $spatial_extents[0]->get('field_ymin')->value,
            'maxx' => $spatial_extents[0]->get('field_xmax')->value,
            'maxy' => $spatial_extents[0]->get('field_ymax')->value,
        );*/

    return $spatialExtent;
  } else {
    return null;
  }
}

/**
 * Implements hook_cron().
 */
function csis_helpers_cron() {
  $interval = 60 * 60 * 24; // Approx one day
  $last_run = \Drupal::state()->get('csis_helpers.emikat_last_run', 0);
  $item = new \stdClass(); // create a dummy object for the queue/service
  $item->gid = 60; // The ID of our special Study group reserved for tests

  // either run a new calculation every 24 hours or check if there are currently results available
  if ((REQUEST_TIME - $last_run) >= $interval) {
    \Drupal::service('csis_helpers.testing')->sendTestStudy($item);
    \Drupal::state()->set('csis_helpers.emikat_last_run', REQUEST_TIME);
  }
  else {
    \Drupal::service('csis_helpers.testing')->checkTestResults($item);
  }

}

/**
 * Generates list with allowed options for this field based on the linked ParagraphType "Study presets" for the "Study" Group
 * this function needs to be added to the configuration of the Field Storage for the given field under
 * settings:
 *   allowed_values_function: NAME_OF_THE_FUNCTION
 *
 * @param FieldStorageConfig $definition
 * @param ContentEntityInterface $entity
 * @param [type] $cacheable
 * @return allowed options
 */
function csis_helpers_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable)
{
  $options = [];
  if (!$entity->get('field_study_presets')->isEmpty()) {
    foreach ($entity->get('field_study_presets') as $paraReference) {
      $paragraph = Paragraph::load($paraReference->target_id);

      if ($paragraph && $paragraph->getType() == "variable_set") {
        $options[$paraReference->target_id] = $paragraph->get('field_label')->value;
      }
    }
  }

  return $options;
}
