<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContent;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Disable in production!
 */
$DEBUG = true;

/**
 * Poor man's debugger
 * See https://stackify.com/how-to-log-to-console-in-php/
 */
function console_log($output, $with_script_tags = true)
{
  $js_code = "console.debug(" . json_encode($output, JSON_HEX_TAG) . ");";
  if ($with_script_tags) {
    $js_code = '<script>' . $js_code . '</script>';
  }
  echo $js_code;
}

/**
 * FIXME: This method is invoked for each entity on the page and thus overwrites all other entity Infos
 */
function csis_helpers_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
  $type = $entity->bundle();
  if ($type == ("gl_step" || "data_package" || "data_package_metadata") && $view_mode != "compact") {
    $entityInfo = csis_helpers_node_entity_info($entity);

    $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
    $build['#attached']['library'][] = 'csis_helpers/include_in_report';
    $build['#attached']['library'][] = 'csis_helpers/html2canvas';
    $build['#attached']['library'][] = 'csis_helpers/seamless';
    $build['#attached']['library'][] = 'csis_helpers/update_step_relations';
    $build['#attached']['library'][] = 'csis_helpers/iframe_connector';

    switch ($type) {
      case 'gl_step':
        $build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = $entityInfo;
        // DEPRECATED: use studyInfo/datapackageInfo/resourceInfo instead!
        $entityInfo['Warning'] = 'DEPRECATED! Use studyInfo instead';
        $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = $entityInfo;
        break;
      case 'data_package':
        $build['#attached']['drupalSettings']['csisHelpers']['datapackageInfo'] = $entityInfo;
        break;
      case 'data_package_metadata':
        $build['#attached']['drupalSettings']['csisHelpers']['resourceInfo'] = $entityInfo;
        break;
        //default:$build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = $entityInfo;
    }
  } else {
    //console_log('entity type ' . $type . ' not supported');
  }
}

function csis_helpers_group_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
  // DEPRECATED: use studyInfo/datapackageInfo/resourceInfo instead!
  $build['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
  $build['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';

  $build['#attached']['drupalSettings']['csisHelpers']['studyInfo'] = csis_helpers_group_entity_info($entity);
}

function csis_helpers_form_node_form_alter(&$form, $form_state, $form_id)
{
  //attach node-id and if group node group-id to drupalSettings

  $entity = $form_state->GetFormObject()->getEntity();
  if ($entity->id()) {
    $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_node_entity_info($entity);
  }

  // prevent page-reload /redirect for the edit-form of Report images (unless user is on the summary page)
  if ($form_id == "node_report_image_edit_form" && \Drupal::request()->query->has('destination')) {
    $pathComponents = explode("/", \Drupal::request()->query->get('destination'));
    $lastPathComponent = end($pathComponents);
    if ($lastPathComponent != "summary") {
      $form['actions']['submit']['#submit'][] = '_csis_helpers_ajax_submit';
      $form['actions']['submit']['#attributes']['class'][] = 'use-ajax-submit';
    }
  }
}

function csis_helpers_form_group_form_alter(&$form, $form_state, $form_id)
{
  //attach group node grout-id to drupalSettings
  $entity = $form_state->GetFormObject()->getEntity();
  if ($entity->id()) {
    $form['#attached']['drupalSettings']['csisHelpers']['entityinfo'] = csis_helpers_group_entity_info($entity);
    $form['#attached']['library'][] = 'csis_helpers/entityinfo_helpers';
  }

  // hide Delete-button for Studies everywhere except for the default Edit-form
  if ($entity->bundle() == "study" && $form['form_id']['#value'] != "group_study_edit_form") {
    $form['actions']['delete']['#access'] = false;
  }
}

function csis_helpers_preprocess_views_view(&$variables)
{
  $view = $variables['view'];
  //\Drupal::logger('csis helpers')->notice($view->id());
  if ($view->id() == 'data_packages' && $view->current_display == 'browser') {
    $variables['#attached']['library'][] = 'csis_helpers/entitybrowser_helpers';
    $variables['#attached']['library'][] = 'csis_helpers/entitybrowser_reorder';
  }

  $variables['#attached']['library'][] = 'csis_helpers/stepdata_helpers';
  $variables['#attached']['library'][] = 'bootstrap/drupal.vertical-tabs';

  $variables['#attached']['library'][] = 'csis_helpers/progress_indicator';
}

function csis_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets)
{
  // kint($javascript);
}

/**
 * Extract information from **node** entity.
 *
 * Attention: data_package_metadata is the machine name of Data Package **Resource**!
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info(\Drupal\Core\Entity\EntityInterface $entity)
{
  // check if current user has assigned other role than "authenticated", if not -> no write/edit rights
  $user = \Drupal::currentUser();
  // getRoles(TRUE) only returns roles other than "anonymous" and "authenticated"
  $has_user_special_roles = !empty($user->getRoles(true));

  $nodeEntityInfo = array(
    'id' => $entity->id(),
    'uuid' => $entity->uuid(),
    //'title' => $entity->get('title')->value, // inconsistency: no title field ins study group! title? label? name?
    //'name' => $entity->get('field_name')->value, // inconsistency: no name field in resource, name field in data package used for 'ckan_id'
    'write_permissions' => ($has_user_special_roles ? 1 : 0),
  );

  $type = $entity->bundle();

  switch ($type) {
    case 'gl_step':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_study($entity));
      break;
    case 'data_package':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_datapackage($entity));
      break;
    case 'data_package_metadata':
      return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_resource($entity));
      break;
      //default:return array_merge($nodeEntityInfo, csis_helpers_node_entity_info_study($entity));
  }

  return $nodeEntityInfo;
}

/**
 * Extract information from **Data Package** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_datapackage(\Drupal\Core\Entity\EntityInterface $entity)
{
  //console_log('creating entity info for data package ' . $entity->get('title')->value);
  $datapackageEntityInfo = array(
    'name' => $entity->get('title')->value
  );

  $spatialExtent = extractSpatialExtent($entity);
  if ($spatialExtent != null) {
    return array_merge($datapackageEntityInfo, $spatialExtent);
  }

  return $datapackageEntityInfo;
}

/**
 * Extract information from DATA PACKAGES' RESOURCE entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_resource(\Drupal\Core\Entity\EntityInterface $entity)
{
  //console_log('creating entity info for resource ' . $entity->get('title')->value);
  $resourcEntityInfo = array(
    'name' => $entity->get('title')->value
  );

  $spatialExtent = extractSpatialExtent($entity);
  if ($spatialExtent != null) {
    return array_merge($resourcEntityInfo, $spatialExtent);
  }

  return $resourcEntityInfo;
}

/**
 * Extract information from STUDY's GL_STEP **node** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_node_entity_info_study(\Drupal\Core\Entity\EntityInterface $entity)
{
  $groupid = array();
  $groupuuid = array();
  $groupEmikatID = null;
  $datapackageUUID = null;
  $groupArea = null;
  $groupEeaName = null;
  $relations = GroupContent::loadByEntity($entity);
  $studyPreset = array();
  $studyPresets = array(); // stores ONLY 1 preset, will be replaced by $studyScenarios
  $studyScenarios = array(); // replacing $studyPresets in the future

  // write-permissions inside a Study need to be checked upon a group-member level and not a user level
  $user = \Drupal::currentUser();
  $has_user_special_roles = false;

  foreach ($relations as $relation) {
    $groupid[] = $relation->getGroup()->id();
    $groupuuid[] = $relation->getGroup()->uuid();
    $groupEmikatID = $relation->getGroup()->get('field_emikat_id')->value;
    $groupEmikatID = empty($groupEmikatID) ? -1 : intval($groupEmikatID);
    $groupName = $relation->getGroup()->get('field_name')->value;
    $groupDatapackageID = $relation->getGroup()->get('field_data_package')->target_id;
    $groupArea = $relation->getGroup()->get('field_area')->value;
    $groupCityTerm = (!$relation->getGroup()->get('field_city_region')->isEmpty() ? Term::load($relation->getGroup()->get('field_city_region')->target_id) : false);

    $member = $relation->getGroup()->getMember($user);
    if ($member) {
      $memberRoles = $member->getRoles();
      foreach ($memberRoles as $role) {
        // GL-steps should be writable for owners and team members, but not observers
        if ($role->id() == "study-owner" || $role->id() == "study-team") {
          $has_user_special_roles = true;
          break;
        }
      }
    }

    // get Study presets (combination of time-period, emission scenario and event frequency) from Paragraph reference
    foreach ($relation->getGroup()->get('field_study_presets') as $paraReference) {
      $paragraph = Paragraph::load($paraReference->target_id);

      if ($paragraph && $paragraph->getType() == "variable_set") {
        // load all the necessary taxonomy terms
        $termEmScenario = Term::load($paragraph->get('field_emission_scenario')->target_id);
        $termEventFreq = Term::load($paragraph->get('field_event_frequency')->target_id);
        $termTimePeriod = Term::load($paragraph->get('field_time_period')->target_id);
        $termStudyVariant = Term::load($paragraph->get('field_study_variant')->target_id);

        // extract preset label and all needed values from those terms
        $studyPreset['label'] = $paragraph->get('field_label')->value;
        $studyPreset['time_period'] = $termTimePeriod->get('field_var_meaning')->value;
        $studyPreset['emission_scenario'] = $termEmScenario->get('field_var_meaning')->value;
        $studyPreset['event_frequency'] = $termEventFreq->get('field_var_meaning')->value;
        $studyPreset['study_variant'] = $termStudyVariant->get('field_var_meaning')->value;

        array_push($studyScenarios, $studyPreset);

        // this can later be removed, once we switch to the $studyScenarios object
        $studyPresets['time_period'] = $termTimePeriod->get('field_var_meaning')->value;
        $studyPresets['emission_scenario'] = $termEmScenario->get('field_var_meaning')->value;
        $studyPresets['event_frequency'] = $termEventFreq->get('field_var_meaning')->value;
        $studyPresets['study_variant'] = $termStudyVariant->get('field_var_meaning')->value;
      }
    }

    if ($groupDatapackageID) {
      $datapackageNode = \Drupal\node\Entity\Node::load($groupDatapackageID);
      $datapackageUUID = $datapackageNode->uuid();
    }

    if ($groupCityTerm) {
      $groupEeaName = $groupCityTerm->get('field_eea_city_profile_name')->value;
    }
  }

  $studyEntityInfo = array(
    'name' => $groupName,
    'step' => $entity->id(),
    'step_uuid' => $entity->uuid(),
    'study' => (empty($groupid) ? -1 : $groupid[0]), //deprecated -> use  entitiyinfo.study.id
    'study_uuid' => (empty($groupuuid) ? -1 : $groupuuid[0]), //deprecated -> use  entitiyinfo.study.uuid
    'id' => (empty($groupid) ? -1 : $groupid[0]), //overwrites $entityinfo.id from csis_helpers_node_entity_info
    'uuid' => (empty($groupuuid) ? -1 : $groupuuid[0]), //overwrites $entityinfo.uuid from csis_helpers_node_entity_info
    'study_emikat_id' => $groupEmikatID,
    'study_datapackage_uuid' => $datapackageUUID,
    'study_area' => $groupArea,
    'eea_city_name' => $groupEeaName,
    'study_presets' => $studyPresets,
    'study_scenarios' => $studyScenarios,
    'write_permissions' => ($has_user_special_roles ? 1 : 0),
  );
  return $studyEntityInfo;
}

/**
 * sets for each Study group the $entityInfo variable
 * Extract information from STUDY **GROUP** entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_group_entity_info(\Drupal\Core\Entity\EntityInterface $entity)
{
  // specify GroupType explicitly, since some fields might be unique to certain GroupTypes only
  if ($entity->getGroupType()->id() == "study") {
    $datapackageUUID = null;
    $eeaName = null;
    $studyPreset = array();
    $studyPresets = array(); // stores ONLY 1 preset, will be replaced by $studyScenarios
    $studyScenarios = array(); // replacing $studyPresets in the future

    // Load the data package
    $groupDatapackageID = $entity->get('field_data_package')->target_id;
    if ($groupDatapackageID) {
      $datapackageNode = \Drupal\node\Entity\Node::load($groupDatapackageID);
      $datapackageUUID = $datapackageNode->uuid();
    }

    // load city term, if is has already been set in the Study
    $cityTerm = (!$entity->get('field_city_region')->isEmpty() ? Term::load($entity->get('field_city_region')->target_id) : false);
    if ($cityTerm) {
      $eeaName = $cityTerm->get('field_eea_city_profile_name')->value;
    }

    // get Study presets (combination of time-period, emission scenario and event frequency) from Paragraph reference
    if (!$entity->get('field_study_presets')->isEmpty()) {
      foreach ($entity->get('field_study_presets') as $paraReference) {
        $paragraph = Paragraph::load($paraReference->target_id);

        if ($paragraph && $paragraph->getType() == "variable_set") {
          // load all the necessary taxonomy terms
          $termTimePeriod = Term::load($paragraph->get('field_time_period')->target_id);
          $termEmScenario = Term::load($paragraph->get('field_emission_scenario')->target_id);
          $termEventFreq = Term::load($paragraph->get('field_event_frequency')->target_id);
          $termStudyVariant = Term::load($paragraph->get('field_study_variant')->target_id);

          // extract preset label and all needed values from those terms
          $studyPreset['label'] = $paragraph->get('field_label')->value;
          $studyPreset['time_period'] = $termTimePeriod->get('field_var_meaning')->value;
          $studyPreset['emission_scenario'] = $termEmScenario->get('field_var_meaning')->value;
          $studyPreset['event_frequency'] = $termEventFreq->get('field_var_meaning')->value;
          $studyPreset['study_variant'] = $termStudyVariant->get('field_var_meaning')->value;

          array_push($studyScenarios, $studyPreset);

          // this can later be removed, once we switch to the $studyScenarios object
          $studyPresets['time_period'] = $termTimePeriod->get('field_var_meaning')->value;
          $studyPresets['emission_scenario'] = $termEmScenario->get('field_var_meaning')->value;
          $studyPresets['event_frequency'] = $termEventFreq->get('field_var_meaning')->value;
          $studyPresets['study_variant'] = $termStudyVariant->get('field_var_meaning')->value;
        }
      }
    }


    // write-permissions inside a Study need to be checked upon a group-member level and not a user level
    $user = \Drupal::currentUser();
    $has_user_special_roles = false;

    $member = $entity->getMember($user);
    if ($member) {
      $memberRoles = $member->getRoles();
      foreach ($memberRoles as $role) {
        // Study group itself should be writable for owners only
        if ($role->id() == "study-owner") {
          $has_user_special_roles = true;
          break;
        }
      }
    }

    $emikatId = $entity->get('field_emikat_id')->value;
    $emikatId = empty($emikatId) ? -1 : intval($emikatId);

    $groupEntityInfo = array(
      //'title' => $entity->get('title')->value, // inconsistency: no title field ins study group!
      'step' => -1,
      'step_uuid' => -1,
      'id' => $entity->id(),
      'uuid' => $entity->uuid(),
      'study' => $entity->id(), //deprecated -> use  entitiyinfo.study.id
      'study_uuid' => $entity->uuid(), //deprecated -> use  entitiyinfo.study.uuid
      'study_emikat_id' => $emikatId,
      'study_datapackage_uuid' => $datapackageUUID,
      'study_area' => $entity->get('field_area')->value,
      'eea_city_name' => $eeaName,
      'study_presets' => $studyPresets,
      'study_scenarios' => $studyScenarios,
      'write_permissions' => ($has_user_special_roles ? 1 : 0),

    );
    return $groupEntityInfo;
  }
}

/**
 * Implements hook_entity_presave().
 * Needed currently for triggering Emikat once a Study is advanced enough or relevant information has changed
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Drupal\node\Entity\Node[]
 */
function csis_helpers_entity_presave(\Drupal\Core\Entity\EntityInterface $entity)
{
  // triggering Emikat only needed for Studies on live website
  if ($entity->bundle() == "study" && \Drupal::request()->getSchemeAndHttpHost() == "https://csis.myclimateservice.eu") {
    /** @var \Drupal\csis_helpers\Utils\EmikatHelperFunctions $emikatService */
    $emikatService = \Drupal::service('csis_helpers.emikat_helper_functions');
    $result = $emikatService->triggerEmikat($entity);

    //print result message to admins and developers directly to FE
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    if ($user->hasRole('administrator') || $user->hasRole('developer')) {
      \Drupal::messenger()->addMessage($result['message'], $result['type']);
    }
  }
}

/**
 * @param $node \Drupal\node\Entity\Node
 */
function csis_helpers_node_insert(\Drupal\node\Entity\Node $node)
{
  // if a Report image is created -> add it as a group content depending on the referenced GL-step
  if ($node->bundle() == 'report_image' && !$node->get('field_source_step')->isEmpty()) {
    // get GL-step (which is already part of the Group)
    $source_step_id = $node->get("field_source_step")->first()->getValue()['target_id'];
    $gl_node = Node::load($source_step_id);

    $plugin_id = 'group_node:' . $node->bundle();

    // if GL-step exists -> load the corresponding group content and retrieve the group id
    if ($gl_node) {
      $group_id = -1;

      $group_contents = GroupContent::loadByEntity($gl_node);
      foreach ($group_contents as $group_content) {
        $group_id = $group_content->getGroup()->id();
      }

      $group = Group::load($group_id);

      // if group exists -> add report image as group content to that group
      if ($group) {
        $group->addContent($node, $plugin_id);
      }
    }
  }
}

/**
 * Implements hook_jsonapi_entity_filter_access() for 'study' group.
 * This is necessary to fix this issue: https://www.drupal.org/project/jsonapi/issues/3037519
 */
function csis_helpers_jsonapi_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account)
{
  return ([
    JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed(),
  ]);
}

/**
 * Close the Modal and prevent redirect or page reload.
 *
 * @param array $form
 *   The form that will be altered.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   FormState Object.
 */
function _csis_helpers_ajax_submit(array $form, FormStateInterface &$form_state)
{
  $response = new AjaxResponse();
  $response->addCommand(new CloseModalDialogCommand());
  $form_state->setResponse($response);
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return Array
 */
function extractSpatialExtent($entity)
{
  $spatial_extents = $entity->get('field_spatial_extent')->referencedEntities(); // referencedEntities() returns an array of entities
  if (
    !empty($spatial_extents) && is_array($spatial_extents) && sizeof($spatial_extents) > 0
    && $spatial_extents[0] != null && $spatial_extents[0]->get('field_bounding_box') != null
  ) {
    //console_log($spatial_extents[0]->get('field_bounding_box')->value);
    $spatialExtent = array('spatial_extent' => $spatial_extents[0]->get('field_bounding_box')->value);

    // @deprecated See https://github.com/clarity-h2020/map-component/issues/53
    /*$spatialExtent = array(
            'minx' => $spatial_extents[0]->get('field_xmin')->value,
            'miny' => $spatial_extents[0]->get('field_ymin')->value,
            'maxx' => $spatial_extents[0]->get('field_xmax')->value,
            'maxy' => $spatial_extents[0]->get('field_ymax')->value,
        );*/

    return $spatialExtent;
  } else {
    return null;
  }
}
